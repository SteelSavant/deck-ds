/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PipelineTarget = "Desktop" | "Gamemode";
export type Selection =
  | {
      Action: PipelineAction;
    }
  | {
      OneOf: {
        actions: string[];
        selection: string;
      };
    }
  | {
      AllOf: EnabledFor_String[];
    };
export type PipelineAction =
  | {
      DisplayConfig: DisplayConfig;
    }
  | {
      VirtualScreen: VirtualScreen;
    }
  | {
      MultiWindow: MultiWindow;
    }
  | {
      CitraConfig: CitraConfig;
    }
  | {
      CemuConfig: CemuConfig;
    }
  | {
      MelonDSConfig: MelonDSConfig;
    };
export type RelativeLocation = "Above" | "Below" | "LeftOf" | "RightOf" | "SameAs";
export type TeardownExternalSettings =
  | "Previous"
  | "Native"
  | {
      Preference: ModePreference;
    };
export type AspectRatioOption =
  | ("Any" | "Native")
  | {
      Exact: number;
    };
export type ModeOptionForDouble =
  | {
      Exact: number;
    }
  | {
      AtLeast: number;
    }
  | {
      AtMost: number;
    };
export type ModeOptionFor_Resolution =
  | {
      Exact: Resolution;
    }
  | {
      AtLeast: Resolution;
    }
  | {
      AtMost: Resolution;
    };
export type VirtualScreen = null;
export type MultiWindow = null;
export type CitraIniSource =
  | "Flatpak"
  | {
      Custom: string;
    };
export type CitraLayoutOption =
  | ("Default" | "SingleScreen" | "LargeScreen" | "SideBySide" | "SeparateWindows" | "HybridScreen")
  | {
      Unknown: number;
    };
export type CemuXmlSource =
  | "Flatpak"
  | {
      Custom: string;
    };
export type MelonDSIniSource =
  | "Flatpak"
  | {
      Custom: string;
    };
/**
 * melonDS layout options. Because of the "unique" way melonDS handles layouts, these options do not map 1:1.
 */
export type MelonDSLayoutOption = "Natural" | "Vertical" | "Horizontal" | "Hybrid" | "Single";
export type MelonDSSizingOption = "Even" | "EmphasizeTop" | "EmphasizeBottom" | "Auto";

/**
 * Marker type for generating API json schema types for ts
 */
export interface __Api {
  autostart_request: AutoStartRequest;
  create_profile_request: CreateProfileRequest;
  create_profile_response: CreateProfileResponse;
  get_pipeline_actions_response: GetPipelineActionsResponse;
  get_profile_request: GetProfileRequest;
  get_profile_response: GetProfileResponse;
  get_profiles_response: GetProfilesResponse;
  get_templates_response: GetTemplatesResponse;
  set_profile_request: SetProfileRequest;
}
export interface AutoStartRequest {
  app: string;
  profile: string;
  target: PipelineTarget;
}
export interface CreateProfileRequest {
  pipeline: PipelineDefinition;
}
export interface PipelineDefinition {
  description: string;
  name: string;
  tags: string[];
  targets: {
    [k: string]: Selection;
  };
}
export interface DisplayConfig {
  teardown_deck_location: RelativeLocation;
  teardown_external_settings: TeardownExternalSettings;
}
export interface ModePreference {
  aspect_ratio: AspectRatioOption;
  refresh: ModeOptionForDouble;
  resolution: ModeOptionFor_Resolution;
}
export interface Resolution {
  h: number;
  w: number;
}
export interface CitraConfig {
  ini_source: CitraIniSource;
  layout_option: CitraLayoutOption;
}
export interface CemuConfig {
  separate_gamepad_view: boolean;
  xml_source: CemuXmlSource;
}
export interface MelonDSConfig {
  book_mode: boolean;
  ini_source: MelonDSIniSource;
  layout_option: MelonDSLayoutOption;
  sizing_option: MelonDSSizingOption;
  swap_screens: boolean;
}
export interface EnabledFor_String {
  /**
   * Flags whether the selection is enabled. If None, not optional. If Some(true), optional and enabled, else disabled.
   */
  enabled?: boolean | null;
  selection: string;
}
export interface CreateProfileResponse {
  profile_id: string;
}
export interface GetPipelineActionsResponse {
  pipeline_actions: {
    [k: string]: PipelineActionDefinition;
  };
}
export interface PipelineActionDefinition {
  /**
   * An optional description of what the action does.
   */
  description?: string | null;
  /**
   * Flags whether the selection is exported for use in other actions.
   */
  exported: boolean;
  /**
   * The name of the action
   */
  name: string;
  /**
   * The value of the pipeline action
   */
  selection: Selection;
}
export interface GetProfileRequest {
  profile_id: string;
}
export interface GetProfileResponse {
  profile: Profile;
}
export interface Profile {
  id: string;
  overrides: Overrides;
  pipeline: PipelineDefinition;
}
/**
 * Overrides for a pipeline definition.
 *
 * Json is in the format
 *
 * ```json { "guid_for_action_selection": { "overridden_field1": "value1", "overridden_field2": 2, "overridden_field3": { "nested_field": 4.5 } }, "guid_for_oneof": { "selection": "some_guid", }, } ```
 *
 * All guids are flattened top-level, so [Selection::AllOf] and [Selection::OneOf]::actions will not exist.
 */
export interface Overrides {
  enabled: {
    [k: string]: boolean;
  };
  fields: {
    [k: string]: unknown;
  };
}
export interface GetProfilesResponse {
  profiles: Profile[];
}
export interface GetTemplatesResponse {
  templates: Template[];
}
export interface Template {
  id: string;
  pipeline: PipelineDefinition;
}
export interface SetProfileRequest {
  profile: Profile;
}
