/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type SelectionFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction =
  | {
      type: "Action";
      value: Action;
    }
  | {
      type: "OneOf";
      value: {
        actions: PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction[];
        selection: string;
      };
    }
  | {
      type: "AllOf";
      value: EnabledFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction[];
    };
export type Action =
  | {
      type: "DisplayConfig";
      value: DisplayConfig;
    }
  | {
      type: "VirtualScreen";
      value: VirtualScreen;
    }
  | {
      type: "MultiWindow";
      value: MultiWindow;
    }
  | {
      type: "CitraLayout";
      value: CitraLayout;
    }
  | {
      type: "CemuLayout";
      value: CemuLayout;
    }
  | {
      type: "MelonDSLayout";
      value: MelonDSLayout;
    }
  | {
      type: "SourceFile";
      value: SourceFile;
    };
export type RelativeLocation = "Above" | "Below" | "LeftOf" | "RightOf" | "SameAs";
export type TeardownExternalSettings =
  | "Previous"
  | "Native"
  | {
      Preference: ModePreference;
    };
export type AspectRatioOption =
  | ("Any" | "Native")
  | {
      Exact: number;
    };
export type ModeOptionForDouble =
  | {
      Exact: number;
    }
  | {
      AtLeast: number;
    }
  | {
      AtMost: number;
    };
export type ModeOptionFor_Resolution =
  | {
      Exact: Resolution;
    }
  | {
      AtLeast: Resolution;
    }
  | {
      AtMost: Resolution;
    };
export type VirtualScreen = null;
export type MultiWindow = null;
export type CitraLayoutOption =
  | {
      type: "Default";
    }
  | {
      type: "SingleScreen";
    }
  | {
      type: "LargeScreen";
    }
  | {
      type: "SideBySide";
    }
  | {
      type: "SeparateWindows";
    }
  | {
      type: "HybridScreen";
    }
  | {
      type: "Unknown";
      value: number;
    };
/**
 * melonDS layout options. Because of the "unique" way melonDS handles layouts, these options do not map 1:1.
 */
export type MelonDSLayoutOption = "Natural" | "Vertical" | "Horizontal" | "Hybrid" | "Single";
export type MelonDSSizingOption = "Even" | "EmphasizeTop" | "EmphasizeBottom" | "Auto";
export type SourceFile =
  | {
      Known: string;
    }
  | {
      Custom: string | null;
    };
export type SelectionFor_Either_WrappedPipelineActionOr_ProfileAction =
  | {
      type: "Action";
      value: Action;
    }
  | {
      type: "OneOf";
      value: {
        actions: (PipelineActionImplFor_WrappedPipelineAction | ProfileAction)[];
        selection: string;
      };
    }
  | {
      type: "AllOf";
      value: EnabledFor_Either_WrappedPipelineActionOr_ProfileAction[];
    };
export type SelectionFor_WrappedPipelineAction =
  | {
      type: "Action";
      value: Action;
    }
  | {
      type: "OneOf";
      value: {
        actions: PipelineActionImplFor_WrappedPipelineAction[];
        selection: string;
      };
    }
  | {
      type: "AllOf";
      value: EnabledFor_WrappedPipelineAction[];
    };
export type PipelineTarget = "Desktop" | "Gamemode";

/**
 * Marker type for generating API json schema types for ts
 */
export interface Api {
  autostart_request: AutoStartRequest;
  create_profile_request: CreateProfileRequest;
  create_profile_response: CreateProfileResponse;
  get_profile_request: GetProfileRequest;
  get_profile_response: GetProfileResponse;
  get_profiles_response: GetProfilesResponse;
  get_templates_response: GetTemplatesResponse;
  set_profile_request: SetProfileRequest;
}
export interface AutoStartRequest {
  app: string;
  pipeline: PipelineImplFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction;
  target: PipelineTarget;
}
export interface PipelineImplFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction {
  description: string;
  name: string;
  tags: string[];
  targets: {
    [k: string]: SelectionFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction;
  };
}
export interface DisplayConfig {
  teardown_deck_location: RelativeLocation;
  teardown_external_settings: TeardownExternalSettings;
}
export interface ModePreference {
  aspect_ratio: AspectRatioOption;
  refresh: ModeOptionForDouble;
  resolution: ModeOptionFor_Resolution;
}
export interface Resolution {
  h: number;
  w: number;
}
export interface CitraLayout {
  layout_option: CitraLayoutOption;
  swap_screens: boolean;
}
export interface CemuLayout {
  separate_gamepad_view: boolean;
}
export interface MelonDSLayout {
  book_mode: boolean;
  layout_option: MelonDSLayoutOption;
  sizing_option: MelonDSSizingOption;
  swap_screens: boolean;
}
export interface PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction {
  /**
   * An optional description of what the action does.
   */
  description?: string | null;
  id: string;
  /**
   * The name of the action
   */
  name: string;
  /**
   * The value of the pipeline action
   */
  selection: SelectionFor_Either_WrappedPipelineActionOr_ProfileAction;
}
export interface PipelineActionImplFor_WrappedPipelineAction {
  /**
   * An optional description of what the action does.
   */
  description?: string | null;
  id: string;
  /**
   * The name of the action
   */
  name: string;
  /**
   * The value of the pipeline action
   */
  selection: SelectionFor_WrappedPipelineAction;
}
export interface EnabledFor_WrappedPipelineAction {
  /**
   * Flags whether the selection is enabled. If None, not optional. If Some(true), optional and enabled, else disabled.
   */
  enabled?: boolean | null;
  selection: PipelineActionImplFor_WrappedPipelineAction;
}
export interface ProfileAction {
  action: string;
  profile: string;
}
export interface EnabledFor_Either_WrappedPipelineActionOr_ProfileAction {
  /**
   * Flags whether the selection is enabled. If None, not optional. If Some(true), optional and enabled, else disabled.
   */
  enabled?: boolean | null;
  selection: PipelineActionImplFor_WrappedPipelineAction | ProfileAction;
}
export interface EnabledFor_PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction {
  /**
   * Flags whether the selection is enabled. If None, not optional. If Some(true), optional and enabled, else disabled.
   */
  enabled?: boolean | null;
  selection: PipelineActionImplFor_Either_WrappedPipelineActionOr_ProfileAction;
}
export interface CreateProfileRequest {
  pipeline: PipelineImplFor_WrappedPipelineAction;
}
export interface PipelineImplFor_WrappedPipelineAction {
  description: string;
  name: string;
  tags: string[];
  targets: {
    [k: string]: SelectionFor_WrappedPipelineAction;
  };
}
export interface CreateProfileResponse {
  profile_id: string;
}
export interface GetProfileRequest {
  profile_id: string;
}
export interface GetProfileResponse {
  profile: Profile;
}
export interface Profile {
  id: string;
  pipeline: PipelineImplFor_WrappedPipelineAction;
}
export interface GetProfilesResponse {
  profiles: Profile[];
}
export interface GetTemplatesResponse {
  templates: ReifiedTemplate[];
}
export interface ReifiedTemplate {
  id: string;
  pipeline: PipelineImplFor_WrappedPipelineAction;
}
export interface SetProfileRequest {
  profile: Profile;
}
